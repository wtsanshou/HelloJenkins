buildscript {
    repositories {
    	jcenter()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.7.RELEASE")
    }
}

plugins {
	id 'io.spring.dependency-management' version "1.0.3.RELEASE"
    id 'org.springframework.boot' version '1.5.6.RELEASE'
	id 'java'
		
	//instant and clever code completion, on-the-fly code analysis and reliable refactoring tools. 
	id 'idea'
	id 'eclipse'
	id 'war'
}

apply plugin: "jacoco"

/*
jar {
    baseName = 'aerobics'
    version =  '0.1.0'
}
*/
//If we need war
war {
    baseName = 'aerobics'
    version =  '0.1.0'
}


sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compileOnly "org.projectlombok:lombok:1.16.18"
    // JPA Data (We are going to use Repositories, Entities, Hibernate, etc...)
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    
    // Use MySQL Connector-J
    compile 'mysql:mysql-connector-java'
    
    // log
    compile group: 'org.slf4j', name: 'slf4j-ext', version: '1.7.25'  
    
    testCompile("org.springframework.boot:spring-boot-starter-test")
    
    // Junit
    testCompile 'junit:junit:4.12'
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.0.2'
}

jacoco {
    toolVersion = "0.7.6.201602180812"
    reportsDir = file("$buildDir/customJacocoReportDir")
}
jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("$buildDir/jacocoHtml")
    }
}

